@using BusinessModels.System.InternetOfThings.type
@using Color = MudBlazor.Color
@using Size = MudBlazor.Size
@using WebApp.Client.Models


@code{

    public class DataGridExtensionsBuilder
    {
        public RenderFragment GenerateTableAction(ButtonAction updateAction, ButtonAction editAction)
        {
            return @<div class="d-flex flex-row gap-3">
                <MudTooltip Arrow="true" Placement="Placement.Top" Color="Color.Secondary" Text="@AppLang.Edit">
                    <MudIconButton Icon="@Icons.Material.Filled.Edit" Variant="Variant.Filled"
                                   OnClick="@updateAction.Action" Disabled="@updateAction.Disabled"
                                   Color="Color.Primary"/>
                </MudTooltip>

                <MudTooltip Arrow="true" Placement="Placement.Top" Color="Color.Secondary" Text="@AppLang.Delete">
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Variant="Variant.Filled"
                                   Size="Size.Small"
                                   OnClick="@editAction.Action" Disabled="@editAction.Disabled"
                                   Color="Color.Primary"/>
                </MudTooltip>
            </div>;
        }

        public RenderFragment GenerateTableAction(params IEnumerable<ButtonAction> actionsBtn)
        {
            return builder =>
            {
                builder.OpenElement(0, "div");
                builder.AddAttribute(0, "class", "d-flex flex-row gap-3");

                int index = 0;
                foreach (var content in actionsBtn)
                {
                    builder.AddContent(index++, ButtonAndTooltip(content));
                }

                builder.CloseElement();
            };
        }

        private RenderFragment ButtonAndTooltip(ButtonAction action)
        {
            return @<MudTooltip Arrow="true" Placement="Placement.Top" Color="Color.Secondary" Text="@action.Title">
                <MudIconButton Icon="@action.Icon" Variant="action.ButtonVariant"
                               Size="action.ButtonSize"
                               OnClick="@action.Action" Disabled="@action.Disabled"
                               Color="action.ButtonColor"/>
            </MudTooltip>;
        }

        public RenderFragment GenerateStatusElement(ProcessStatus status)
        {
            return builder =>
            {
                builder.OpenElement(0, "div");
                switch (status)
                {
                    case ProcessStatus.Requesting:
                        builder.AddAttribute(0, "class", "d-flex align-center flex-row gap-0 mud-chip-filled mud-chip-color-error rounded-pill py-1 pl-1");
                        break;
                    case ProcessStatus.Processing:
                        builder.AddAttribute(0, "class", "d-flex align-center flex-row gap-0 mud-chip-filled mud-chip-color-primary rounded-pill py-1 pl-1");
                        break;
                    case ProcessStatus.Completed:
                        builder.AddAttribute(0, "class", "d-flex align-center flex-row gap-0 mud-chip-filled mud-chip-color-success rounded-pill py-1 pl-1");
                        break;
                }

                if (status == ProcessStatus.Completed)
                {
                    builder.OpenComponent<MudIcon>(0);
                    builder.AddComponentParameter(0, "Color", Color.Error);
                    builder.AddComponentParameter(1, "Size", Size.Small);
                    builder.AddComponentParameter(2, "Title", AppLang.Success);
                    builder.AddComponentParameter(3, "Icon", Icons.Material.Filled.Check);
                    builder.CloseComponent();
                }
                else
                {
                    builder.OpenComponent<MudProgressCircular>(0);
                    builder.AddComponentParameter(0, "Color", Color.Error);
                    builder.AddComponentParameter(1, "Size", Size.Small);
                    builder.AddComponentParameter(2, "Indeterminate", true);
                    builder.CloseComponent();
                }

                builder.OpenElement(1, "span");
                builder.AddAttribute(2, "class", "d-flex flex-column ml-1");
                builder.AddAttribute(3, "style", "width:100%");
                builder.AddContent(4, status.ToString());
                builder.CloseElement();

                builder.CloseElement();
            };
        }
    }

}
